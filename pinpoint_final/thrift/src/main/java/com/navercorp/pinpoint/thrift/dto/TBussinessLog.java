/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-20")
public class TBussinessLog implements org.apache.thrift.TBase<TBussinessLog, TBussinessLog._Fields>, java.io.Serializable, Cloneable, Comparable<TBussinessLog> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBussinessLog");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COLLECT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("collectInterval", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BUSSINESS_LOG_V1S_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessLogV1s", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBussinessLogStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBussinessLogTupleSchemeFactory();

  private long timestamp; // optional
  private long collectInterval; // optional
  private java.util.List<TBussinessLogV1> bussinessLogV1s; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    COLLECT_INTERVAL((short)2, "collectInterval"),
    BUSSINESS_LOG_V1S((short)10, "bussinessLogV1s");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // COLLECT_INTERVAL
          return COLLECT_INTERVAL;
        case 10: // BUSSINESS_LOG_V1S
          return BUSSINESS_LOG_V1S;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __COLLECTINTERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.COLLECT_INTERVAL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLLECT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("collectInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUSSINESS_LOG_V1S, new org.apache.thrift.meta_data.FieldMetaData("bussinessLogV1s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBussinessLogV1.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBussinessLog.class, metaDataMap);
  }

  public TBussinessLog() {
  }

  public TBussinessLog(
    java.util.List<TBussinessLogV1> bussinessLogV1s)
  {
    this();
    this.bussinessLogV1s = bussinessLogV1s;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBussinessLog(TBussinessLog other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    this.collectInterval = other.collectInterval;
    if (other.isSetBussinessLogV1s()) {
      java.util.List<TBussinessLogV1> __this__bussinessLogV1s = new java.util.ArrayList<TBussinessLogV1>(other.bussinessLogV1s.size());
      for (TBussinessLogV1 other_element : other.bussinessLogV1s) {
        __this__bussinessLogV1s.add(new TBussinessLogV1(other_element));
      }
      this.bussinessLogV1s = __this__bussinessLogV1s;
    }
  }

  public TBussinessLog deepCopy() {
    return new TBussinessLog(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    setCollectIntervalIsSet(false);
    this.collectInterval = 0;
    this.bussinessLogV1s = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getCollectInterval() {
    return this.collectInterval;
  }

  public void setCollectInterval(long collectInterval) {
    this.collectInterval = collectInterval;
    setCollectIntervalIsSet(true);
  }

  public void unsetCollectInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  /** Returns true if field collectInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  public void setCollectIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID, value);
  }

  public int getBussinessLogV1sSize() {
    return (this.bussinessLogV1s == null) ? 0 : this.bussinessLogV1s.size();
  }

  public java.util.Iterator<TBussinessLogV1> getBussinessLogV1sIterator() {
    return (this.bussinessLogV1s == null) ? null : this.bussinessLogV1s.iterator();
  }

  public void addToBussinessLogV1s(TBussinessLogV1 elem) {
    if (this.bussinessLogV1s == null) {
      this.bussinessLogV1s = new java.util.ArrayList<TBussinessLogV1>();
    }
    this.bussinessLogV1s.add(elem);
  }

  public java.util.List<TBussinessLogV1> getBussinessLogV1s() {
    return this.bussinessLogV1s;
  }

  public void setBussinessLogV1s(java.util.List<TBussinessLogV1> bussinessLogV1s) {
    this.bussinessLogV1s = bussinessLogV1s;
  }

  public void unsetBussinessLogV1s() {
    this.bussinessLogV1s = null;
  }

  /** Returns true if field bussinessLogV1s is set (has been assigned a value) and false otherwise */
  public boolean isSetBussinessLogV1s() {
    return this.bussinessLogV1s != null;
  }

  public void setBussinessLogV1sIsSet(boolean value) {
    if (!value) {
      this.bussinessLogV1s = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case COLLECT_INTERVAL:
      if (value == null) {
        unsetCollectInterval();
      } else {
        setCollectInterval((java.lang.Long)value);
      }
      break;

    case BUSSINESS_LOG_V1S:
      if (value == null) {
        unsetBussinessLogV1s();
      } else {
        setBussinessLogV1s((java.util.List<TBussinessLogV1>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case COLLECT_INTERVAL:
      return getCollectInterval();

    case BUSSINESS_LOG_V1S:
      return getBussinessLogV1s();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case COLLECT_INTERVAL:
      return isSetCollectInterval();
    case BUSSINESS_LOG_V1S:
      return isSetBussinessLogV1s();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TBussinessLog)
      return this.equals((TBussinessLog)that);
    return false;
  }

  public boolean equals(TBussinessLog that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_collectInterval = true && this.isSetCollectInterval();
    boolean that_present_collectInterval = true && that.isSetCollectInterval();
    if (this_present_collectInterval || that_present_collectInterval) {
      if (!(this_present_collectInterval && that_present_collectInterval))
        return false;
      if (this.collectInterval != that.collectInterval)
        return false;
    }

    boolean this_present_bussinessLogV1s = true && this.isSetBussinessLogV1s();
    boolean that_present_bussinessLogV1s = true && that.isSetBussinessLogV1s();
    if (this_present_bussinessLogV1s || that_present_bussinessLogV1s) {
      if (!(this_present_bussinessLogV1s && that_present_bussinessLogV1s))
        return false;
      if (!this.bussinessLogV1s.equals(that.bussinessLogV1s))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
    if (isSetTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetCollectInterval()) ? 131071 : 524287);
    if (isSetCollectInterval())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(collectInterval);

    hashCode = hashCode * 8191 + ((isSetBussinessLogV1s()) ? 131071 : 524287);
    if (isSetBussinessLogV1s())
      hashCode = hashCode * 8191 + bussinessLogV1s.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TBussinessLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCollectInterval()).compareTo(other.isSetCollectInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectInterval, other.collectInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBussinessLogV1s()).compareTo(other.isSetBussinessLogV1s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBussinessLogV1s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessLogV1s, other.bussinessLogV1s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBussinessLog(");
    boolean first = true;

    if (isSetTimestamp()) {
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetCollectInterval()) {
      if (!first) sb.append(", ");
      sb.append("collectInterval:");
      sb.append(this.collectInterval);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("bussinessLogV1s:");
    if (this.bussinessLogV1s == null) {
      sb.append("null");
    } else {
      sb.append(this.bussinessLogV1s);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBussinessLogStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TBussinessLogStandardScheme getScheme() {
      return new TBussinessLogStandardScheme();
    }
  }

  private static class TBussinessLogStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBussinessLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBussinessLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLLECT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.collectInterval = iprot.readI64();
              struct.setCollectIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUSSINESS_LOG_V1S
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.bussinessLogV1s = new java.util.ArrayList<TBussinessLogV1>(_list40.size);
                TBussinessLogV1 _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TBussinessLogV1();
                  _elem41.read(iprot);
                  struct.bussinessLogV1s.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setBussinessLogV1sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBussinessLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeFieldBegin(COLLECT_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.collectInterval);
        oprot.writeFieldEnd();
      }
      if (struct.bussinessLogV1s != null) {
        oprot.writeFieldBegin(BUSSINESS_LOG_V1S_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bussinessLogV1s.size()));
          for (TBussinessLogV1 _iter43 : struct.bussinessLogV1s)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBussinessLogTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TBussinessLogTupleScheme getScheme() {
      return new TBussinessLogTupleScheme();
    }
  }

  private static class TBussinessLogTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBussinessLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBussinessLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetCollectInterval()) {
        optionals.set(1);
      }
      if (struct.isSetBussinessLogV1s()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeI64(struct.collectInterval);
      }
      if (struct.isSetBussinessLogV1s()) {
        {
          oprot.writeI32(struct.bussinessLogV1s.size());
          for (TBussinessLogV1 _iter44 : struct.bussinessLogV1s)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBussinessLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.collectInterval = iprot.readI64();
        struct.setCollectIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bussinessLogV1s = new java.util.ArrayList<TBussinessLogV1>(_list45.size);
          TBussinessLogV1 _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TBussinessLogV1();
            _elem46.read(iprot);
            struct.bussinessLogV1s.add(_elem46);
          }
        }
        struct.setBussinessLogV1sIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

